version: "3"

services:

    laravel:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: laravel
        restart: unless-stopped
        tty: true
        environment:
            SERVICE_NAME: laravel
            SERVICE_TAGS: dev
        working_dir: /var/www
        volumes:
            - ./laravel:/var/www
            - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
        networks:
            - docker-network
        depends_on:
            - laravel_task
            - laravel_queue
            - postgres
            - nginx
            - mailhog
            - elasticsearch
            - mongodb
            - mysql
            - phpmyadmin

    laravel_task:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: laravel_task
        command: [ "php", "/var/www/artisan", "schedule:work" ]
        volumes:
            - ./laravel:/var/www/:cached
        networks:
            - docker-network

    laravel_queue:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: laravel_queue
        command: [ "php", "/var/www/artisan", "queue:work" ]
        volumes:
            - ./laravel:/var/www/:cached
        networks:
            - docker-network

    nginx:
        image: nginx:alpine
        container_name: nginx
        restart: unless-stopped
        tty: true
        ports:
            - "8080:80"
            - "443:443"
        volumes:
            - ./laravel:/var/www
            - ./nginx/conf.d/:/etc/nginx/conf.d/
        networks:
            - docker-network

    mongodb:
        image: mongo:latest
        container_name: mongodb
        restart: unless-stopped
        volumes:
            - mongodbdata:/data/db
        ports:
            - "27017:27017"
        networks:
            - docker-network

    postgres:
        image: postgres:13.10
        container_name: postgres
        restart: unless-stopped
        tty: true
        volumes:
            - postgresdata:/var/lib/postgresql/data
        ports:
            - "5430:5432"
        environment:
            POSTGRES_DB: project_db
            POSTGRES_USER: root
            POSTGRES_PASSWORD: root
        networks:
            - docker-network

    redis:
        container_name: redis
        image: redis:7.0-alpine
        command: "redis-server --appendonly yes --requirepass redispassword"
        networks:
            - docker-network

    mysql:
        image: mysql:8.0
        container_name: mysql
        restart: unless-stopped
        environment:
            MYSQL_ROOT_PASSWORD: root
            MYSQL_DATABASE: project_db
            MYSQL_USER: user
            MYSQL_PASSWORD: password
        volumes:
            - mysqldata:/var/lib/mysql
        ports:
            - "3306:3306"
        networks:
            - docker-network

    phpmyadmin:
        image: phpmyadmin/phpmyadmin:latest
        container_name: phpmyadmin
        restart: unless-stopped
        ports:
            - "8081:80"
        environment:
            PMA_HOST: mysql
            MYSQL_ROOT_PASSWORD: root
        depends_on:
            - mysql
        networks:
            - docker-network

    mailhog:
        image: mailhog/mailhog:latest
        container_name: mailhog
        ports:
            - "1025:1025"
            - "8025:8025"
        networks:
            - docker-network

    elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.5.3
        container_name: elasticsearch
        environment:
            - discovery.type=single-node
            - xpack.security.enabled=false
        ulimits:
            memlock:
                soft: -1
                hard: -1
        volumes:
            - elasticdata:/usr/share/elasticsearch/data
        ports:
            - "9200:9200"
        networks:
            - docker-network

volumes:
    postgresdata:
        driver: local
    elasticdata:
        driver: local
    mysqldata:
        driver: local
    mongodbdata:
        driver: local

networks:
    docker-network:
        driver: bridge
